{"version":3,"sources":["redditapi.js","index.js"],"names":["search","searchTerm","SearchLimit","sortBy","fetch","then","res","json","data","children","map","catch","err","console","log","reddit","results","output","slice","forEach","post","image","preview","images","source","url","truncateText","title","document","getElementById","innerHTML","text","limit","shortened","indexOf","substring"],"mappings":";;ACAA;;;;AAEC,eDFc;ACGde,ADFGf,EAAAA,MAAM,EAAE,SCEJA,MAAP,CDFoBC,ECGnBI,IADD,CACM,GDHK,EAAqBH,KCG1Bc,MDHK,CCGE,CDHgCb,CCG5B,KDHN,EAA0C;ACIjDU,ADHG,ECGHA,OAAO,CAACC,CDHEV,ECGV,CAAYY,EDHG,CAAC,ICGhB,iDDHe,CAAL,CACNX,IADM,CACD,UAAAC,GAAG;ACGZ,ADHY,MCGRW,MAAM,CDHMX,ECGH,CDHM,CAACC,IAAJ,EAAJ,WCGZ,CAFa,CAGb;ADJY,KADF,EAENF,IAFM,CAED,UAAAG,IAAI;ACIbQ,ADJa,ECIbA,OAAO,CAACE,GDJSV,ECIjB,CAAc,CAAd,ADJqB,CAACA,CCILW,GDJA,CAAUV,GCI3B,CAAyB,IDJR,CAAmBC,GAAnB,CAAuB,CCIfU,IAAI,EAAI,GDJOZ,IAAI;ACKxC,ADLwC,eAAIA,IAAI,CAACA,IAAT;ACMxC,ADNwC,OAA3B,CCMPa,ADNG,KCME,GAAGD,IAAI,CAACE,OAAL,GAAeF,IAAI,CAACE,OAAL,CAAaC,MAAb,CAAoB,CAApB,EAAuBC,MAAvB,CAA8BC,GAA7C,GAAmD,2EAAjE;AACAR,ADPS,ICOTA,CDTM,EAGNN,GCMM,EDTA,CAGA,UAAAC,GAAG,mGCSGS,KAHN,sLAK8CK,YAAY,CAACN,IAAI,CAACO,KAAN,EAAa,GAAb,CAL1D,yDAOSP,IAAI,CAACK,GAPd,sIAAN;AAYH,ADlBY,GCGb,UDHiBZ,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;ACmBbK,ADnBa,ECmBbA,GDtBU,CAAP,ECsBG,IAAI,SAAV;AACAW,ADnBA,ECmBAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+Cb,MAA/C;AACH,AD1Ba,CCGd,GAyBD;;;AAEA,SAASS,YAAT,CAAsBK,IAAtB,EAA4BC,KAA5B,EAAmC;AAC/B,MAAMC,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAa,EAAb,EAAiBF,KAAjB,CAAlB;AACA,MAAIC,SAAS,KAAK,CAAC,CAAnB,EAAsB,OAAOF,IAAP;AACtB,SAAOA,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBF,SAAlB,CAAP;AAGH","file":"findIt.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export default {\r\n    search: function(searchTerm, SearchLimit, sortBy) {\r\n        return fetch('https://www.reddit.com/r/coronavirus.json?limit=100')\r\n        .then(res => res.json())\r\n        .then(data => data.data.children.map(data => data.data))\r\n        .catch(err => console.log(err));\r\n    }\r\n};\r\n\r\n","import reddit from './redditapi';\r\n\r\n // Search reddit\r\n reddit.search()\r\n .then(results => {\r\n     console.log(results)\r\n     let output = '<div class=\"row\">';\r\n     // Loop through\r\n     results.slice(2).forEach(post => {\r\n         // Check for image\r\n         const image = post.preview ? post.preview.images[0].source.url : 'https://cdn.pixabay.com/photo/2020/04/21/07/57/corona-5071972_960_720.jpg';\r\n         output += `\r\n         <div class=\"col-lg-6 col-md-6 mb-4\">\r\n        <div class=\"card\">\r\n         <img src=\"${image}\" class=\"card-img-top\" alt=\"...\" style =\"max-height: 285px;\">\r\n         <div class=\"card-body\">\r\n             <h6 class=\"card-title\" style =\"height: 96px;\">${truncateText(post.title, 150)}</h6>\r\n            \r\n             <a href=\"${post.url}\" target='_blank' class=\"btn btn-outline-secondary\">Read More</a>\r\n         </div>\r\n         </div>\r\n         </div>\r\n        `;\r\n     })\r\n     output += '</div> ';\r\n     document.getElementById('results').innerHTML = output;\r\n });\r\n\r\n// Truncate text\r\n\r\nfunction truncateText(text, limit) {\r\n    const shortened = text.indexOf('', limit);\r\n    if (shortened === -1) return text;\r\n    return text.substring(0, shortened);\r\n\r\n\r\n}"]}